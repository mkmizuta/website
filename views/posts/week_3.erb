date: 2013-11-15

<h1>Behold the power of memoization</h1>
<p>
  While working on the Farmer Market project, we learned about <strong>memoization.</strong> Using Ruby and Rspec, we wrote code to get each spec to pass.  We started with 60 or so failures (i.e. a lot of red).  By the end of the week, our specs were glorious green.
</p>
<p>
  It took nearly 13 seconds to run all of our specs.  Our goal was to get it under 2 seconds.  Enter <strong>memoization</strong> - <em>our specs ran in 1.2 seconds as a result!</em>  Much faster, right!<br>
</p>

<h2>all about the memoization:</h2>
<p>
  "Memoization is an optimization technique used to store the result of expensive (slow) method calls for later re-use. This allows us to avoid repeatedly performing an expensive calculation when the result has already been calculated once." - Bookis Smuin, Ada Developer's Academy Lead Instructor
</p>
<p>
  Here’s how we did it:
</p>
<p>
  First, we created a method called <code>self.all</code>.
</p>
<p>
  <code>
    def self.all<br>
      &nbsp;@all_vendors ||= CSV.read("./support/vendors.csv").map do |array|<br>
        &nbsp;&nbsp;Vendor.new(array)<br>
      &nbsp;end<br>
    end<br>
  </code>
</p>
<p>
  That method used an instance variable <code>@all_vendors</code> and mapped the CSV file to an array.
</p>
<p>
  When we call that method later, Ruby in true brilliant form has the data ready to go (formatted as <code>Vendor.new(array)</code>, so that it can run more quickly the next time.
</p>
<p>
  <code>
    def self.find_by_name(name)<br>
      &nbsp;all.find do |vendor|<br>
        &nbsp;&nbsp;vendor.name.downcase =~ /#{name}/i<br>
      &nbsp;end<br>
    end<br>
  </code>
</p>
<p>
  So in this example, Ruby takes the memoized vendor array we created in <code>self.all</code>, and with that list, searches for the vendor’s name we called in the new method.  If we didn’t have a memoized vendor array when searching for vendor’s names, Ruby would have gone through each vendor in the database, searched for the name one row at a time, and placed the called info into an array.
</p>
<p>
  From 13 seconds to two… :)
</p>
